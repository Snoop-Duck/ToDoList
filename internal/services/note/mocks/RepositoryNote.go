// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	notes "github.com/Snoop-Duck/ToDoList/internal/domain/notes"
)

// RepositoryNote is an autogenerated mock type for the RepositoryNote type
type RepositoryNote struct {
	mock.Mock
}

// AddNote provides a mock function with given fields: _a0
func (_m *RepositoryNote) AddNote(_a0 notes.Note) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddNote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(notes.Note) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNote provides a mock function with given fields: noteID
func (_m *RepositoryNote) DeleteNote(noteID string) error {
	ret := _m.Called(noteID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(noteID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNoteID provides a mock function with given fields: noteID
func (_m *RepositoryNote) GetNoteID(noteID string) (notes.Note, error) {
	ret := _m.Called(noteID)

	if len(ret) == 0 {
		panic("no return value specified for GetNoteID")
	}

	var r0 notes.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (notes.Note, error)); ok {
		return rf(noteID)
	}
	if rf, ok := ret.Get(0).(func(string) notes.Note); ok {
		r0 = rf(noteID)
	} else {
		r0 = ret.Get(0).(notes.Note)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(noteID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotes provides a mock function with no fields
func (_m *RepositoryNote) GetNotes() ([]notes.Note, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNotes")
	}

	var r0 []notes.Note
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]notes.Note, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []notes.Note); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]notes.Note)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNote provides a mock function with given fields: noteID, _a1
func (_m *RepositoryNote) UpdateNote(noteID string, _a1 notes.Note) error {
	ret := _m.Called(noteID, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, notes.Note) error); ok {
		r0 = rf(noteID, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepositoryNote creates a new instance of RepositoryNote. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryNote(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryNote {
	mock := &RepositoryNote{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
